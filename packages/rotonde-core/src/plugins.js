import fs from 'fs-extra';
import path from 'path';
import { exec } from 'child_process';
import shellEnv from 'shell-env';
import {
  getPlugins,
  getPluginsDirectory,
  getLocalPluginsDirectory
} from './config';

/**
 * Installs the plugins.
 */
export function installPlugins() {
  return new Promise(async (resolve, reject) => {
    let env;
    try {
      env = await shellEnv();
    } catch (err) {
      return reject(err);
    }
    const pluginsDirectory = getPluginsDirectory();
    fs.mkdirpSync(pluginsDirectory);
    createPluginsPackageJson(pluginsDirectory, getPlugins());
    exec('npm prune && npm install --production', {
      cwd: pluginsDirectory,
      env
    }, err => {
      if (err) {
        return reject(err);
      }
      return resolve();
    });
  });
}

/**
 * Creates a `package.json` file for the plugins.
 *
 * @param pluginsDirectory The directory in which the plugins will be installed.
 */
function createPluginsPackageJson(pluginsDirectory, plugins) {
  const dependencies = toDependencies(plugins);
  const pluginsPackage = {
    name: 'rotonde-core-plugins',
    description: 'Auto-generated by rotonde-core.',
    private: true,
    version: '1.0.0',
    dependencies
  };
  const filename = path.resolve(pluginsDirectory, 'package.json');
  try {
    fs.writeFileSync(filename, JSON.stringify(pluginsPackage, null, 2));
  } catch (err) {
    throw err;
  }
}

/**
 * Returns the map of `package.json` dependencies generated from the list of plugins.
 *
 * @param plugins The list of plugins to use to generate the dependencies.
 */
function toDependencies(plugins) {
  const dependencies = {};
  plugins.forEach(plugin => {
    const pattern = /.(@|#)/;
    const match = pattern.exec(plugin);
    if (match) {
      const index = match.index + 1;
      const parts = [];
      parts[0] = plugin.substring(0, index);
      parts[1] = plugin.substring(index + 1, plugin.length);
      dependencies[parts[0]] = parts[1];
    } else {
      dependencies[plugin] = 'latest';
    }
  });
  return dependencies;
}
